package com.arithmetic;/** * @program: HttpAutoTest * @description: 冒泡排序 * @author: gonghuihui * @create: 2018-09-17 14:24 **/public class BubbleSort {    /**     * @Description: 冒泡排序的第一种实现, 没有任何优化     * @Param: a     * @return: void     * @Author: gonghuihui     * @Date: 2018/9/17     */    public static void bubbleSortA(int [] a) {        int i , j;        int n = a.length;        for (i=0; i<n; i++) {            for (j=1; j<n-i; j++) {                if (a[j-1] > a[j]) {                    int temp;                    temp = a[j-1];                    a[j-1] = a[j];                    a[j] = temp;                }            }        }    }    public static void bubbleSortB(int[] b){        /**         * @Description: 设置一个标志，如果这一趟发生了交换，则为true，否则为false。明显如果有一趟没有发生交换，说明排序已经完成。        * @Param: b        * @return: void         * @Author: gonghuihui        * @Date: 2018/9/17         */         int n = b.length;        int j, k = n;        boolean flag = true;//发生了交换就为true, 没发生就为false，第一次判断时必须标志位true        while (flag) {            flag =false;//每次开始排序前，都设置flag为未排序过            for (j=1; j<k; j++) {                if (b[j-1] > b[j]) {                    int temp;                    temp = b[j-1];                    b[j-1] = b[j];                    b[j] = temp;                    //表示交换过数据                    flag = true;                }            }            k--;        }    }    public static void bubbleSortC(int[] c) {        /**         * @Description: 最优冒泡排序         * @Param: c        * @return: void         * @Author: gonghuihui        * @Date: 2018/9/17         */         int j, k;        int flag = c.length; //flag来记录最后交换的位置，也就是排序的尾边界        while (flag > 0) {  // 排序未结束标志            k = flag;  // k来记录遍历的尾边界            flag = 0;            for (j=1; j<k; j++) {                if (c[j-1] > c[j]) {                    int temp;                    temp = c[j-1];                    c[j-1] = c[j];                    c[j] = temp;                    flag = j;  //记录最新的尾边界.                }            }        }    }    public static void main(String[] args) {        int[] arr = {1,1,2,0,9,3,12,7,8,3,4,65,22};        BubbleSort.bubbleSortC(arr);        for (int i : arr) {            System.out.println(i+ ", ");        }    }}