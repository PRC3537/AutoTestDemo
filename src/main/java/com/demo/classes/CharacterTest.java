package com.demo.classes;/** * @program: AutoTestDemo * @description: Character测试 * @author: gonghuihui * @create: 2018-10-16 20:09 **/public class CharacterTest {    public static void main(String[] args) {        Character ch = new Character('Z');        Character ch1 = new Character('b');        char[] chs = {'a', 'b', 'c', 'D', '3'};        int aIndex = Character.codePointAt(chs, 3); // 返回chs[3] = 'D'的ASCII码        CharSequence chsq = "123D232sdfsdfsdf";        int n = Character.codePointCount(chsq, 0, chsq.length());        char a = 'Z';        char b = 'b';        int c = '\u216C';        char d = '\u06ee';        int e = 0x0068;        System.out.println("codePointAt: " + aIndex);        System.out.println("codePointAt: " + Character.codePointAt(chs, 3, 4));        System.out.println("codePointBefore: " + Character.codePointBefore(chs, 4));        System.out.println("codePointBefore: " + Character.codePointBefore(chsq, 4));        System.out.println("codePointCount: " + Character.codePointCount(chs, 0, chs.length));        System.out.println("codePointCount: " + n);        System.out.println("compare: " + Character.compare(a, b));        System.out.println("compareTo: " + ch.compareTo(ch1));        // 将字符转化为16进制数字，'0'-'9'分别对应0-9，'a'-'f'分别对应10-15转为16进制数字        System.out.println("digit: " + Character.digit('9', 16));        // 将数字转化为进制的字符，0-9分别对应的'0'-'9'，10-35分别对应的小写的'a'-'z'        System.out.println("forDigit: " + Character.forDigit(15, 16));        // 返回char值的方向属性，不知具体是干嘛的        System.out.println("getDirectionality: " + Character.getDirectionality(d));        // Returns the Unicode name of the specified character        System.out.println("getName: " + Character.getName(d));        // 返回指定的Unicode字符表示的int值        System.out.println("getNumericValue: " + Character.getNumericValue(e));        //        System.out.println("getType: " + Character.getType(b));        System.out.println("hashCode: " + Character.hashCode('z'));        // ？？？        System.out.println("highSurrogate: " + Character.highSurrogate(5));        // 判断是不是一个字母，与isLeeter的区别        System.out.println("isAlphabetic: " + Character.isAlphabetic(n));        // isBmpCodePoint        System.out.println("isBmpCodePoint: " + Character.isBmpCodePoint(c));    }}