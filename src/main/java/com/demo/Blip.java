package com.demo;import java.io.Externalizable;import java.io.IOException;import java.io.ObjectInput;import java.io.ObjectOutput;/** * @program: AutoTestDemo * @description: writeExternal()和readExternal()，这两个方法在序列化和反序列化还原的过程中被自动调用，以便执行一些特殊的操作 * @author: gonghuihui * @create: 2018-10-08 19:33 **/public class Blip implements Externalizable {    private int i;    private String s;  // 没有初始化    public Blip() {        // 默认构造函数必须有，而且必须是public        System.out.println("Blip默认构造函数");    }    public Blip(String s, int i) {        // s,i只是在带有参数的构造函数中进行初始化        System.out.println("Blip带参数构造函数");        this.s = s;        this.i = i;    }    public String toString() {        return s + i;    }    @Override    public void readExternal(ObjectInput in) throws IOException,            ClassNotFoundException {        System.out.println("调用readExternal () 方法");        s = (String)in.readObject(); // 在反序列化时，需要初始化s和i，否则只是调用默认构造函数，得不到s和i的值        i = in.readInt();    }    @Override    public void writeExternal(ObjectOutput out) throws IOException {        System.out.println("调用writeExternal () 方法");        out.writeObject(s);  // 如果我们不将s和i的值写入的话，那么在反序列化的时候，就不会得到这些值        out.writeInt(i);    }}    /*    总结Externalizable对象的用法：    与Serizable对象不同，使用Externalizabled，就意味着没有任何东西可以自动序列化， 为了正常的运行，我们需要在writeExtenal()方法中将自对象的重要信息写入，从而手动的完成序列化。对于一个Externalizabled对象，对象的默认构造函数都会被调用（包括哪些在定义时已经初始化的字段），然后调用readExternal()，在此方法中必须手动的恢复数据。     */