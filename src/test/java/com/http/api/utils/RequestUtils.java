package com.http.api.utils;import javax.servlet.http.Cookie;import javax.servlet.http.HttpServletRequest;import java.io.BufferedReader;import java.io.DataOutputStream;import java.io.InputStreamReader;import java.io.UnsupportedEncodingException;import java.net.HttpURLConnection;import java.net.URL;/** * @program: HttpAutoTest * @description: http调用工具 * @author: gonghuihui * @create: 2018-09-11 16:18 **/public class RequestUtils {    static boolean proxySet = false;    static String proxyHost = "127.0.0.1";    static int prosyPort = 8087;    /**    * @Description: 编码    * @Param: null    * @return:    * @Author: gonghuihui    * @Date: 2018/9/13    */    public static String urlEncode(String source, String encode) {        String result = source;        try {            result = java.net.URLEncoder.encode(source, encode);        } catch (UnsupportedEncodingException e) {            e.printStackTrace();            return "0";        }        return result;    }    /**     * @Description: GET请求     * @Param: get_url     * @return: void     * @Author: gonghuihui     * @Date: 2018/9/14     */    public static void httpConnectionGET(String get_url) {        try {            URL url = new URL(get_url);   // 把字符串转化为URL请求地址            HttpURLConnection connection = (HttpURLConnection) url.openConnection();   // 打开链接            connection.connect();   // 连接会话            // 获取输入流            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream(), "UTF-8"));            String line;            StringBuilder sb = new StringBuilder();            // 循环读取流            while ((line = br.readLine()) != null) {                sb.append(line);            }            br.close();   //关闭流            connection.disconnect();   // 断开连接            System.out.println(sb.toString());        } catch (Exception e) {            e.printStackTrace();            System.out.println("失败！");        }    }    /**     * @Description: POST请求     * @Param: request     * @Param: post_url     * @Param: param     * @return: void     * @Author: gonghuihui     * @Date: 2018/9/13     */    public static void httpURLConnectionPOST (HttpServletRequest request, String post_url, String param) {        try {            URL url = new URL(post_url);            // 将url 以 open方法返回的urlConnection  连接强转为HttpURLConnection连接  (标识一个url所引用的远程对象连接)            HttpURLConnection connection = (HttpURLConnection) url.openConnection();   // 此时cnnection只是为一个连接对象,待连接中            // 设置连接输出流为true,默认false (post 请求是以流的方式隐式的传递参数)            connection.setDoOutput(true);            // 设置请求方式为post            connection.setRequestMethod("POST");            // post请求缓存设置为false            connection.setUseCaches(false);            // 设置该HttpURLConnection是否自动执行重定向            connection.setInstanceFollowRedirects(true);            // 设置请求头里面的各个属性 (以下为设置内容的类型,设置为经过urlEncoded编码过的from参数)            // application/x-javascript text/xml->xml数据 application/x-javascript->json对象 application/x-www-form-urlencoded->表单数据            // charset=utf-8 必须要            connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded;charset=utf-8");            // 建立连接 (请求未开始,直到connection.getInputStream()方法调用时才发起,以上各个参数设置需在此方法之前进行)            connection.connect();            // 创建输入输出流,用于往连接里面输出携带的参数,(输出内容为?后面的内容)            DataOutputStream dataout = new DataOutputStream(connection.getOutputStream());//            String identifier = "identifier=" + URLEncoder.encode("gonghuihui", "utf-8");//            String password = "&password=" + URLEncoder.encode("GHH00701", "utf-8");//            String next = "&next=" + URLEncoder.encode("", "utf-8");            // 格式 param = aaa=111&bbb=222&ccc=333&ddd=444//            String param = identifier + password + next;            // 将参数输出到连接            dataout.writeBytes(param);            // 输出完成后刷新并关闭流            dataout.flush();            dataout.close();   //重要且已忽略步骤（关闭流，切记）            // 连接发起请求，处理服务器相应（从连接获取到输入流并包装为buffereReader）            BufferedReader bf = new BufferedReader(new InputStreamReader(connection.getInputStream(), "utf-8"));            String line;            StringBuilder sb = new StringBuilder();   // 用来存储响应数据            // 循环读取流，直到结束            while ((line = bf.readLine()) != null) {                sb.append(line).append(System.getProperty("line.separator"));            }            Cookie[] cookies = request.getCookies();            System.out.println("Cookies: " + cookies);            bf.close();   // 重要且易忽略步骤 (关闭流,切记!)            connection.disconnect();   // 销毁连接            System.out.println(sb.toString());        } catch (Exception e) {            e.printStackTrace();        }    }    /**     * @Description: 入参组装     * @Param: key     * @Param: value     * @Param: isfirst     * @return: java.lang.String     * @Author: gonghuihui     * @Date: 2018/9/14     */    public static String paramPackge(String key, String value, boolean isfirst) {        return isfirst == true ? key + "=" + value : "&" + key + "=" + value;    }}